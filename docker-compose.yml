version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: linkedin-clone-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: linkedin_clone
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - linkedin-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: linkedin-clone-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - linkedin-network

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: linkedin-clone-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/linkedin_clone?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CLIENT_URL: http://localhost:3000
      CLOUDINARY_CLOUD_NAME: your-cloudinary-cloud-name
      CLOUDINARY_API_KEY: your-cloudinary-api-key
      CLOUDINARY_API_SECRET: your-cloudinary-api-secret
      EMAIL_USER: your-email@gmail.com
      EMAIL_PASS: your-email-password
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - linkedin-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: linkedin-clone-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - linkedin-network

volumes:
  mongodb_data:
  redis_data:

networks:
  linkedin-network:
    driver: bridge